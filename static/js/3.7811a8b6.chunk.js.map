{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/ProfileInfo/ProfileInfoContacts.jsx","assets/images/looking_job.png","assets/images/found_job.png","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","Post","props","className","s","item","src","message","likesCount","maxLength10","maxLengthCreator","MyPostsRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","MyPosts","React","memo","console","log","postsElements","posts","reverse","map","p","postsBlock","values","addPost","newPostText","ProfileInfoContacts","contacts","Component","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","Preloader","contactsArr","Object","descriptionBlock","photos","large","aboutMe","lookingJob","lookingForAJob","LookingJob","FindJob","fullName","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.7811a8b6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2ZJh9\",\"lookingJob\":\"ProfileInfo_lookingJob__1c5ge\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2ER8-\",\"posts\":\"MyPosts_posts__1Kmyn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__13vUa\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n \r\n\r\n  return <div className={s.item}>\r\n    <img src=\"https://lwlies.com/wp-content/uploads/2017/04/avatar-2009.jpg\" />\r\n    {props.message}<div>\r\n      <span>like {props.likesCount}</span>\r\n    </div>\r\n  </div>\r\n\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {Field, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators';\r\nimport {Textarea} from '../../common/FormsControls/FormsControls';\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\nlet AddNewPostForm = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field component={Textarea} name=\"newPostText\" placeholder={\"Post message\"}\r\n                   validate={[required, maxLength10]}/>\r\n            {/* <textarea onChange={onPostChange} ref={newPostElement} value={props.newPostText} />  <textarea id='new-post'></textarea> */}\r\n        </div>\r\n        <div>\r\n            {/* <button onClick={onaddPost}>Add post</button> */}\r\n            <button>Add post</button>\r\n\r\n            <button>Remove</button>\r\n        </div>\r\n    </form>\r\n}\r\nlet MyPostsRedux = reduxForm({form: \"myPostsPosttext\"})(AddNewPostForm);\r\n\r\n\r\nconst MyPosts = React.memo(props => {\r\n    console.log(\"RENDER YO\");\r\n\r\n    let postsElements =\r\n        [...props.posts]\r\n            .reverse()\r\n            .map(p => <Post message={p.message} likesCount={p.likesCount}/>); //p - это элемент массива (1 эл - { id: 1, message: 'Hi, how you?', likesCount: 12})\r\n    let newPostElement = React.createRef();\r\n    let onaddPost = () => {\r\n        // let text = document.getElementById('new-post').value; - нельзя использовать DOM\r\n        props.addPost();\r\n\r\n    }\r\n    // let onPostChange = () => {\r\n    //       let text = newPostElement.current.value;\r\n    // props.updateNewPostText(text);\r\n    //   }\r\n\r\n    let onSubmitAddPost = (values) => {\r\n        props.addPost(values.newPostText) //название newPostText взято из name для textarea (45 строка)\r\n    }\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <MyPostsRedux onSubmit={onSubmitAddPost}/>\r\n\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n                {/* <Post message={postData[0].message} likesCount={postData[0].likesCount} />\r\n      <Post message={postData[1].message} likesCount={postData[1].likesCount} /> */}\r\n                {/* <Post message=\"Hi, how you?\" likesCount=\"5\" /> */}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default MyPosts;","import React from 'react';\r\n\r\n\r\nconst ProfileInfoContacts = (props) => {\r\n  \r\n \r\n  return (\r\n    <div>{props.contacts}</div>\r\n  )\r\n}\r\n\r\nexport default ProfileInfoContacts;","export default __webpack_public_path__ + \"static/media/looking_job.0c8a3f8a.png\";","export default __webpack_public_path__ + \"static/media/found_job.de3258f6.png\";","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nclass ProfileStatus extends React.Component {\r\n\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n    activateEditMode = () => {\r\n       // console.log('this:', this)\r\n        this.setState({  //этот метод асинхронный\r\n            editMode: true\r\n        })\r\n        // console.log(this.state.editMode); - false, так как setState асинхронный и выполнится после этого consol.log\r\n        //this.state.editMode = true;\r\n        // this.forceUpdate(); - костыль\r\n    }\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        });\r\n        this.props.updateStatus(this.state.status);\r\n    }\r\n    onStatusChange = (e) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        });\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        \r\n        if (prevProps.status !== this.props.status )\r\n        {\r\n            this.setState (\r\n                {\r\n                    status: this.props.status\r\n                }\r\n            )\r\n        }\r\n    }\r\n    render() {\r\n        console.log(\"render\")\r\n        return (\r\n            <div>\r\n                {!this.state.editMode &&\r\n                    <div>\r\n                        <span onDoubleClick={this.activateEditMode}>{this.props.status || \"-------\"}</span>\r\n                    </div>\r\n                }\r\n                {this.state.editMode &&\r\n                    <div>\r\n                        {/* <input autoFocus={true} onBlur={this.deactivateEditMode.bind(this)} value={this.props.status} /> */}\r\n                        <input onChange={this.onStatusChange} autoFocus={true} onBlur={this.deactivateEditMode} value={this.state.status} />\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProfileStatus;\r\n\r\n","import React, {useEffect, useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n//  let stateWithSetState =  useState(false); //массив\r\n//  let editMode = stateWithSetState[0]; //1 элемент массива значение\r\n//  let setEditMode = stateWithSetState[1]; //2 элемент массива - это функция, которая это значение устанавливает\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{props.status || \"-------\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                {/* <input autoFocus={true} onBlur={this.deactivateEditMode.bind(this)} value={this.props.status} /> */}\r\n                <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;\r\n\r\n","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport ProfileInfoContacts from './ProfileInfoContacts';\r\nimport LookingJob from '../../../assets/images/looking_job.png';\r\nimport FindJob from '../../../assets/images/found_job.png';\r\nimport ProfileStatus from './ProfileStatus';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus}) => {\r\n\r\n  if (!profile) {\r\n    return <Preloader />\r\n  }\r\n  let contacts = profile.contacts;\r\n  const values = Object.values(contacts);\r\n  let contactsArr = values.map(p =><ProfileInfoContacts contacts={p} />);\r\n\r\n  return (\r\n    <div>\r\n      {/* <div>\r\n        <img src='https://markotour.com.ua/images/2021/04/02/dominikana1.jpg' />\r\n      </div> */}\r\n      <div className={s.descriptionBlock}>\r\n        <img src = {profile.photos.large} />\r\n        <div>{profile.aboutMe}</div>\r\n        <div>{contactsArr}</div>\r\n        <div><img className={s.lookingJob} src={profile.lookingForAJob?LookingJob:FindJob} /></div>\r\n        <div>{profile.fullName}</div>\r\n        <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport { addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from './MyPosts';\r\n//import StoreContext from '../../../StoreContext';\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n\r\n/*const MyPostsContainer = () => {\r\n\r\n//  let state = props.store.getState();\r\n\r\n  \r\n\r\n\r\n  return (\r\n    <StoreContext.Consumer>\r\n      { (store) => {\r\n        let state = store.getState();  \r\n        let addPost = () => {\r\n          store.dispatch(addPostActionCreator());\r\n        }\r\n        let onPostChange = (text) => {\r\n          let action = updateNewPostTextActionCreator(text);\r\n          store.dispatch(action);\r\n        }\r\n     return <MyPosts updateNewPostText={onPostChange}\r\n        addPost={addPost}\r\n        posts={state.profilePage.posts}\r\n        newPostText={state.profilePage.newPostText} />}\r\n      }\r\n    </StoreContext.Consumer>\r\n  )\r\n}\r\n*/\r\nlet mapStateToProps = (state) => {\r\n  return{\r\n    posts: state.profilePage.posts,\r\n    newPostText: state.profilePage.newPostText\r\n  }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return{\r\n    addPost: (newPostText) => {\r\n      dispatch(addPostActionCreator(newPostText))\r\n    }\r\n    // },\r\n    // updateNewPostText: (text) => {\r\n    //   let action = updateNewPostTextActionCreator(text);\r\n    //       dispatch(action);\r\n    // }\r\n  }\r\n}\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport MyPosts from './MyPosts/MyPosts';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\n\r\nconst Profile = (props) => {\r\n \r\n  // let posts = [\r\n  //   { id: 1, message: 'Hi, how you?', likesCount: 12},\r\n  //   { id: 2,  message: 'It\\'s my first post', likesCount: 11 },\r\n  //   { id: 3,  message: 'Blalbla', likesCount: 11 },\r\n  //   { id: 4,  message: 'Dada', likesCount: 11 }\r\n  \r\n  // ];\r\n\r\n  return (\r\n     <div>\r\n    <ProfileInfo profile = {props.profile} status = {props.status} updateStatus = {props.updateStatus} />\r\n    <MyPostsContainer />\r\n     </div>\r\n  )\r\n}\r\n  \r\nexport default Profile;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Profile from './Profile';\r\nimport { getUserProfile, getStatus, updateStatus } from '../../redux/profile-reducer';\r\nimport { withRouter } from 'react-router';\r\nimport { compose } from 'redux';\r\n\r\nclass ProfileContainer extends React.Component {\r\n  componentDidMount() {\r\n    let userId = this.props.match.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserId;\r\n      if (!userId){\r\n        this.props.history.push(\"/login\")\r\n      }\r\n    }\r\n    this.props.getUserProfile(userId);\r\n    this.props.getStatus(userId);\r\n\r\n  }\r\n  render() {\r\n\r\n    return (\r\n\r\n      <Profile {...this.props} /*props={this.props}*/ \r\n      profile={this.props.profile} \r\n      status={this.props.status} \r\n      updateStatus={this.props.updateStatus} />\r\n    )\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  authorizedUserId: state.auth.userId,\r\n  isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, { getUserProfile, getStatus, updateStatus }),\r\n  withRouter\r\n  //,withAuthRedirect\r\n)(ProfileContainer);\r\n\r\n// let AuthRedirectComponent =  withAuthRedirect(ProfileContainer);\r\n\r\n\r\n\r\n\r\n\r\n// let WithUrlDataContainerComponent = withRouter(AuthRedirectComponent);\r\n// export default connect (mapStateToProps, {getUserProfile}) (WithUrlDataContainerComponent); //получает данные от Store и получает Callback от Store"],"sourceRoot":""}